(()=>{var t={584:t=>{t.exports=function(t,e){return Array.prototype.slice.call(t,e)}},514:(t,e,n)=>{"use strict";var r=n(115);t.exports=function(t,e,n){t&&r((function(){t.apply(n||null,e||[])}))}},229:(t,e,n)=>{"use strict";var r=n(584),i=n(514);t.exports=function(t,e){var n=e||{},o={};return void 0===t&&(t={}),t.on=function(e,n){return o[e]?o[e].push(n):o[e]=[n],t},t.once=function(e,n){return n._once=!0,t.on(e,n),t},t.off=function(e,n){var r=arguments.length;if(1===r)delete o[e];else if(0===r)o={};else{var i=o[e];if(!i)return t;i.splice(i.indexOf(n),1)}return t},t.emit=function(){var e=r(arguments);return t.emitterSnapshot(e.shift()).apply(this,e)},t.emitterSnapshot=function(e){var s=(o[e]||[]).slice(0);return function(){var o=r(arguments),a=this||t;if("error"===e&&!1!==n.throws&&!s.length)throw 1===o.length?o[0]:o;return s.forEach((function(r){n.async?i(r,o,a):r.apply(a,o),r._once&&t.off(e,r)})),t}},t}},808:(t,e,n)=>{"use strict";var r=n(638),i=n(874),o=n.g.document,s=function(t,e,n,r){return t.addEventListener(e,n,r)},a=function(t,e,n,r){return t.removeEventListener(e,n,r)},u=[];function c(t,e,n){var r=function(t,e,n){var r,i;for(r=0;r<u.length;r++)if((i=u[r]).element===t&&i.type===e&&i.fn===n)return r}(t,e,n);if(r){var i=u[r].wrapper;return u.splice(r,1),i}}n.g.addEventListener||(s=function(t,e,r){return t.attachEvent("on"+e,function(t,e,r){var i=c(t,e,r)||function(t,e,r){return function(e){var i=e||n.g.event;i.target=i.target||i.srcElement,i.preventDefault=i.preventDefault||function(){i.returnValue=!1},i.stopPropagation=i.stopPropagation||function(){i.cancelBubble=!0},i.which=i.which||i.keyCode,r.call(t,i)}}(t,0,r);return u.push({wrapper:i,element:t,type:e,fn:r}),i}(t,e,r))},a=function(t,e,n){var r=c(t,e,n);if(r)return t.detachEvent("on"+e,r)}),t.exports={add:s,remove:a,fabricate:function(t,e,n){var s=-1===i.indexOf(e)?new r(e,{detail:n}):function(){var t;return o.createEvent?(t=o.createEvent("Event")).initEvent(e,!0,!0):o.createEventObject&&(t=o.createEventObject()),t}();t.dispatchEvent?t.dispatchEvent(s):t.fireEvent("on"+e,s)}}},874:(t,e,n)=>{"use strict";var r=[],i="",o=/^on/;for(i in n.g)o.test(i)&&r.push(i.slice(2));t.exports=r},638:(t,e,n)=>{var r=n.g.CustomEvent;t.exports=function(){try{var t=new r("cat",{detail:{foo:"bar"}});return"cat"===t.type&&"bar"===t.detail.foo}catch(t){}return!1}()?r:"undefined"!=typeof document&&"function"==typeof document.createEvent?function(t,e){var n=document.createEvent("CustomEvent");return e?n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail):n.initCustomEvent(t,!1,!1,void 0),n}:function(t,e){var n=document.createEventObject();return n.type=t,e?(n.bubbles=Boolean(e.bubbles),n.cancelable=Boolean(e.cancelable),n.detail=e.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}},425:t=>{"use strict";var e={};function n(t){var n=e[t];return n?n.lastIndex=0:e[t]=n=new RegExp("(?:^|\\s)"+t+"(?:\\s|$)","g"),n}t.exports={add:function(t,e){var r=t.className;r.length?n(e).test(r)||(t.className+=" "+e):t.className=e},rm:function(t,e){t.className=t.className.replace(n(e)," ").trim()}}},137:(t,e,n)=>{"use strict";var r=n(229),i=n(808),o=n(425),s=document,a=s.documentElement;function u(t,e,r,o){n.g.navigator.pointerEnabled?i[e](t,{mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"}[r],o):n.g.navigator.msPointerEnabled?i[e](t,{mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"}[r],o):(i[e](t,{mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"}[r],o),i[e](t,r,o))}function c(t){if(void 0!==t.touches)return t.touches.length;if(void 0!==t.which&&0!==t.which)return t.which;if(void 0!==t.buttons)return t.buttons;var e=t.button;return void 0!==e?1&e?1:2&e?3:4&e?2:0:void 0}function l(t,e){return void 0!==n.g[e]?n.g[e]:a.clientHeight?a[t]:s.body[t]}function d(t,e,n){var r,i=(t=t||{}).className||"";return t.className+=" gu-hide",r=s.elementFromPoint(e,n),t.className=i,r}function f(){return!1}function v(){return!0}function h(t){return t.width||t.right-t.left}function m(t){return t.height||t.bottom-t.top}function p(t){return t.parentNode===s?null:t.parentNode}function g(t){return"INPUT"===t.tagName||"TEXTAREA"===t.tagName||"SELECT"===t.tagName||y(t)}function y(t){return!!t&&"false"!==t.contentEditable&&("true"===t.contentEditable||y(p(t)))}function b(t){return t.nextElementSibling||function(){var e=t;do{e=e.nextSibling}while(e&&1!==e.nodeType);return e}()}function E(t,e){var n=function(t){return t.targetTouches&&t.targetTouches.length?t.targetTouches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t}(e),r={pageX:"clientX",pageY:"clientY"};return t in r&&!(t in n)&&r[t]in n&&(t=r[t]),n[t]}t.exports=function(t,e){var n,y,k,C,w,S,L,T,x,O,D;1===arguments.length&&!1===Array.isArray(t)&&(e=t,t=[]);var B,I=null,N=e||{};void 0===N.moves&&(N.moves=v),void 0===N.accepts&&(N.accepts=v),void 0===N.invalid&&(N.invalid=function(){return!1}),void 0===N.containers&&(N.containers=t||[]),void 0===N.isContainer&&(N.isContainer=f),void 0===N.copy&&(N.copy=!1),void 0===N.copySortSource&&(N.copySortSource=!1),void 0===N.revertOnSpill&&(N.revertOnSpill=!1),void 0===N.removeOnSpill&&(N.removeOnSpill=!1),void 0===N.direction&&(N.direction="vertical"),void 0===N.ignoreInputTextSelection&&(N.ignoreInputTextSelection=!0),void 0===N.mirrorContainer&&(N.mirrorContainer=s.body);var A=r({containers:N.containers,start:function(t){var e=V(t);e&&U(e)},end:_,cancel:G,remove:z,destroy:function(){X(!0),$({})},canMove:function(t){return!!V(t)},dragging:!1});return!0===N.removeOnSpill&&A.on("over",(function(t){o.rm(t,"gu-hide")})).on("out",(function(t){A.dragging&&o.add(t,"gu-hide")})),X(),A;function R(t){return-1!==A.containers.indexOf(t)||N.isContainer(t)}function X(t){var e=t?"remove":"add";u(a,e,"mousedown",M),u(a,e,"mouseup",$)}function P(t){u(a,t?"remove":"add","mousemove",F)}function Y(t){var e=t?"remove":"add";i[e](a,"selectstart",j),i[e](a,"click",j)}function j(t){B&&t.preventDefault()}function M(t){if(S=t.clientX,L=t.clientY,1===c(t)&&!t.metaKey&&!t.ctrlKey){var e=t.target,n=V(e);n&&(B=n,P(),"mousedown"===t.type&&(g(e)?e.focus():t.preventDefault()))}}function F(t){if(B)if(0!==c(t)){if(!(void 0!==t.clientX&&Math.abs(t.clientX-S)<=(N.slideFactorX||0)&&void 0!==t.clientY&&Math.abs(t.clientY-L)<=(N.slideFactorY||0))){if(N.ignoreInputTextSelection){var e=E("clientX",t)||0,r=E("clientY",t)||0;if(g(s.elementFromPoint(e,r)))return}var i=B;P(!0),Y(),_(),U(i);var d,f={left:(d=k.getBoundingClientRect()).left+l("scrollLeft","pageXOffset"),top:d.top+l("scrollTop","pageYOffset")};C=E("pageX",t)-f.left,w=E("pageY",t)-f.top,o.add(O||k,"gu-transit"),function(){if(!n){var t=k.getBoundingClientRect();(n=k.cloneNode(!0)).style.width=h(t)+"px",n.style.height=m(t)+"px",o.rm(n,"gu-transit"),o.add(n,"gu-mirror"),N.mirrorContainer.appendChild(n),u(a,"add","mousemove",W),o.add(N.mirrorContainer,"gu-unselectable"),A.emit("cloned",n,k,"mirror")}}(),W(t)}}else $({})}function V(t){if(!(A.dragging&&n||R(t))){for(var e=t;p(t)&&!1===R(p(t));){if(N.invalid(t,e))return;if(!(t=p(t)))return}var r=p(t);if(r&&!N.invalid(t,e)&&N.moves(t,r,e,b(t)))return{item:t,source:r}}}function U(t){var e,n;e=t.item,n=t.source,("boolean"==typeof N.copy?N.copy:N.copy(e,n))&&(O=t.item.cloneNode(!0),A.emit("cloned",O,t.item,"copy")),y=t.source,k=t.item,T=x=b(t.item),A.dragging=!0,A.emit("drag",k,y)}function _(){if(A.dragging){var t=O||k;J(t,p(t))}}function K(){B=!1,P(!0),Y(!0)}function $(t){if(K(),A.dragging){var e=O||k,r=E("clientX",t)||0,i=E("clientY",t)||0,o=Q(d(n,r,i),r,i);o&&(O&&N.copySortSource||!O||o!==y)?J(e,o):N.removeOnSpill?z():G()}}function J(t,e){var n=p(t);O&&N.copySortSource&&e===y&&n.removeChild(k),q(e)?A.emit("cancel",t,y,y):A.emit("drop",t,e,y,x),H()}function z(){if(A.dragging){var t=O||k,e=p(t);e&&e.removeChild(t),A.emit(O?"cancel":"remove",t,e,y),H()}}function G(t){if(A.dragging){var e=arguments.length>0?t:N.revertOnSpill,n=O||k,r=p(n),i=q(r);!1===i&&e&&(O?r&&r.removeChild(O):y.insertBefore(n,T)),i||e?A.emit("cancel",n,y,y):A.emit("drop",n,r,y,x),H()}}function H(){var t=O||k;K(),n&&(o.rm(N.mirrorContainer,"gu-unselectable"),u(a,"remove","mousemove",W),p(n).removeChild(n),n=null),t&&o.rm(t,"gu-transit"),D&&clearTimeout(D),A.dragging=!1,I&&A.emit("out",t,I,y),A.emit("dragend",t),y=k=O=T=x=D=I=null}function q(t,e){var r;return r=void 0!==e?e:n?x:b(O||k),t===y&&r===T}function Q(t,e,n){for(var r=t;r&&!i();)r=p(r);return r;function i(){if(!1===R(r))return!1;var i=Z(r,t),o=tt(r,i,e,n);return!!q(r,o)||N.accepts(k,r,y,o)}}function W(t){if(n){t.preventDefault();var e=E("clientX",t)||0,r=E("clientY",t)||0,i=e-C,o=r-w;n.style.left=i+"px",n.style.top=o+"px";var s=O||k,a=d(n,e,r),u=Q(a,e,r),c=null!==u&&u!==I;(c||null===u)&&(I&&h("out"),I=u,c&&h("over"));var l=p(s);if(u!==y||!O||N.copySortSource){var f,v=Z(u,a);if(null!==v)f=tt(u,v,e,r);else{if(!0!==N.revertOnSpill||O)return void(O&&l&&l.removeChild(s));f=T,u=y}(null===f&&c||f!==s&&f!==b(s))&&(x=f,u.insertBefore(s,f),A.emit("shadow",s,u,y))}else l&&l.removeChild(s)}function h(t){A.emit(t,s,I,y)}}function Z(t,e){for(var n=e;n!==t&&p(n)!==t;)n=p(n);return n===a?null:n}function tt(t,e,n,r){var i,o="horizontal"===N.direction;return e!==t?(i=e.getBoundingClientRect(),s(o?n>i.left+h(i)/2:r>i.top+m(i)/2)):function(){var e,i,s,a=t.children.length;for(e=0;e<a;e++){if(s=(i=t.children[e]).getBoundingClientRect(),o&&s.left+s.width/2>n)return i;if(!o&&s.top+s.height/2>r)return i}return null}();function s(t){return t?b(e):e}}}},115:t=>{var e;e="function"==typeof setImmediate?function(t){setImmediate(t)}:function(t){setTimeout(t,0)},t.exports=e}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t,e=new Uint8Array(16);function r(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(e)}const i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(t){return"string"==typeof t&&i.test(t)};for(var s=[],a=0;a<256;++a)s.push((a+256).toString(16).substr(1));const u=function(t,e,n){var i=(t=t||{}).random||(t.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e){n=n||0;for(var a=0;a<16;++a)e[n+a]=i[a];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]).toLowerCase();if(!o(n))throw TypeError("Stringified UUID is invalid");return n}(i)};class c{constructor(){this.listeners={}}add(t,e,n,r=u()){this.listeners[r]={event:t,element:e,handler:n},e.addEventListener(t,n)}remove(t){const e=this.listeners[t];e&&(e.element.removeEventListener(e.event,e.handler),delete this.listeners[t])}}const l={todo:"TODO",doing:"DOING",done:"DONE"};class d{constructor(t){this.id=t.id||u(),this.title=t.title,this.status=t.status||l.todo}update(t){this.title=t.title||this.title,this.status=t.status||this.status}static validate(t){return!!(t&&o(t.id)&&t.title&&Object.values(l).includes(t.status))}}const f="TASKS";class v{constructor(){this.storage=localStorage,this.tasks=this.getStoredTasks()}add(t){this.tasks.push(t),this.updateStorage()}delete(t){this.tasks=this.tasks.filter((({id:e})=>e!==t.id)),this.updateStorage()}find(t){return this.tasks.find((e=>e.id===t))}update(t){this.tasks=this.tasks.map((e=>e.id===t.id?t:e))}filter(t){return this.tasks.filter((({status:e})=>e===t))}moveAboveTarget(t,e){const n=this.tasks.indexOf(t),r=this.tasks.indexOf(e);this.changeOrder(t,n,n<r?r-1:r)}moveToLast(t){const e=this.tasks.indexOf(t);this.changeOrder(t,e,this.tasks.length)}changeOrder(t,e,n){this.tasks.splice(e,1),this.tasks.splice(n,0,t),this.updateStorage()}updateStorage(){this.storage.setItem(f,JSON.stringify(this.tasks))}getStoredTasks(){const t=this.storage.getItem(f);if(!t)return[];try{const e=JSON.parse(t);return function(t){if(!Array.isArray(t)||!t.every((t=>d.validate(t))))throw new Error("引数「value」は TaskObject[] 型と一致しません。")}(e),e.map((t=>new d(t)))}catch(t){return this.storage.removeItem(f),[]}}}var h=n(137),m=n.n(h);class p{constructor(t,e,n){this.todoList=t,this.doingList=e,this.doneList=n}append(t){const{taskEl:e,deleteButtonEl:n}=this.render(t);return this.todoList.append(e),{deleteButtonEl:n}}remove(t){const e=document.getElementById(t.id);e&&(t.status===l.todo&&this.todoList.removeChild(e),t.status===l.doing&&this.doingList.removeChild(e),t.status===l.done&&this.doneList.removeChild(e))}subscribeDragAndDrop(t){m()([this.todoList,this.doingList,this.doneList]).on("drop",((e,n,r,i)=>{let o=l.todo;"doingList"===n.id&&(o=l.doing),"doneList"===n.id&&(o=l.done),t(e,i,o)}))}getId(t){return t.id}renderAll(t){return[...this.renderList(t.filter(l.todo),this.todoList),...this.renderList(t.filter(l.doing),this.doingList),...this.renderList(t.filter(l.done),this.doneList)]}renderList(t,e){if(0===t.length)return[];const n=[];return t.forEach((t=>{const{taskEl:r,deleteButtonEl:i}=this.render(t);e.append(r),n.push({task:t,deleteButtonEl:i})})),n}render(t){const e=document.createElement("div"),n=document.createElement("span"),r=document.createElement("button");return e.id=t.id,e.classList.add("task-item"),n.textContent=t.title,r.textContent="削除",e.append(n,r),{taskEl:e,deleteButtonEl:r}}}class g{constructor(){this.eventListener=new c,this.taskCollection=new v,this.taskRenderer=new p(document.getElementById("todoList"),document.getElementById("doingList"),document.getElementById("doneList")),this.handleSubmit=t=>{t.preventDefault();const e=document.getElementById("title");if(!e.value)return;const n=new d({title:e.value});this.taskCollection.add(n);const{deleteButtonEl:r}=this.taskRenderer.append(n);this.eventListener.add("click",r,(()=>this.handleClickDeleteTask(n)),n.id),e.value=""},this.executeDeleteTask=t=>{this.eventListener.remove(t.id),this.taskCollection.delete(t),this.taskRenderer.remove(t)},this.handleClickDeleteTask=t=>{window.confirm(`「${t.title}」を削除してよろしいですか？`)&&this.executeDeleteTask(t)},this.handleClickDeleteAllDoneTasks=()=>{window.confirm("DONE のタスクを一括削除してよろしいですか？")&&this.taskCollection.filter(l.done).forEach((t=>this.executeDeleteTask(t)))},this.handleDropAndDrop=(t,e,n)=>{const r=this.taskRenderer.getId(t);if(!r)return;const i=this.taskCollection.find(r);if(i)if(i.update({status:n}),this.taskCollection.update(i),e){const t=this.taskRenderer.getId(e);if(!t)return;const n=this.taskCollection.find(t);if(!n)return;this.taskCollection.moveAboveTarget(i,n)}else this.taskCollection.moveToLast(i)}}start(){const t=this.taskRenderer.renderAll(this.taskCollection),e=document.getElementById("createForm"),n=document.getElementById("deleteAllDoneTask");t.forEach((({task:t,deleteButtonEl:e})=>{this.eventListener.add("click",e,(()=>this.handleClickDeleteTask(t)),t.id)})),this.eventListener.add("submit",e,this.handleSubmit),this.eventListener.add("click",n,this.handleClickDeleteAllDoneTasks),this.taskRenderer.subscribeDragAndDrop(this.handleDropAndDrop)}}window.addEventListener("load",(()=>{(new g).start()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,